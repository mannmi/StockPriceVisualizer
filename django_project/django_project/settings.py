"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
import logging.config
from pathlib import Path
from src.config_loader.configLoader import YmlLoader
from src.os_calls.basic_os_calls import is_running_in_docker

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-y8mj^eqhbs=1yeiz!*mwela@k5gui(0vcyon7jkm+ca341)zdv'
# load Data

if is_running_in_docker():
    cpath = os.path.abspath("../docker-compose.yml")
    docker_config = YmlLoader(cpath)
    dbConfFull = docker_config.data['services']['db']
    host = dbConfFull["networks"]["custom_network"]["ipv4_address"]
else:
    cpath = os.path.abspath("")
    docker_config = YmlLoader(cpath)

    dbConfFull = docker_config.data['services']['db']
    host = "127.0.0.1"

dbConf = dbConfFull['environment']
user = dbConf['MYSQL_USER']
password = dbConf['MYSQL_PASSWORD']
database = dbConf['MYSQL_DATABASE']
# todo change to ip where the server is setup :) may have to move this to a config at somme stage (this is a dirty implementation)


hostPort, containerPort = docker_config.data['services']['db']['ports'][0].split(':')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['172.20.0.3','172.20.0.1','172.20.0.2','172.20.0.4', 'localhost', '127.0.0.1']

# Application definition

# This was copied from the folowing source on the (11/12/2024)
# source https://stackoverflow.com/questions/60845876/django-logging-not-printing-to-console-and-file
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'level': 'INFO',
            'handlers': ['console'],
            'propagate': False,
        },
        '': {
            'level': 'INFO',
            'handlers': ['console'],
        },
    },
}

logging.config.dictConfig(LOGGING)

INSTALLED_APPS = [
    "daphne",
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'websockets',
    'myapp',
    'socket',  # Updated app name
    'channels',
]
# https://django-websocket-redis.readthedocs.io/en/latest/installation.html
# Specify the URL that distinguishes websocket connections from normal requests
WEBSOCKET_URL = '/ws/'
#number in seconds message are kept persisted by Redis
WS4REDIS_EXPIRE = 7200

ASGI_APPLICATION = "django_project.asgi.application"
# settings.py
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:YOUR_STRONG_PASSWORD@redis:6379/1',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        }
    }
}
# settings.py
REDIS_HOST = '172.20.0.4'
REDIS_PORT = 6379

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [(REDIS_HOST, REDIS_PORT)],
        },
    },
}




# # add a web_socket to listen to and send message with
# ASGI_APPLICATION = "web_socket.asgi.application"
# CHANNEL_LAYERS = {
#     "default": {
#         "BACKEND": "channels_redis.core.RedusChannelLayer",
#         "CONFIG": {
#             "hosts": [("127.0.0.1", "6379")],
#         },
#     },
# }

# Optional: This is to ensure Django sessions are stored in Redis
SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
SESSION_CACHE_ALIAS = 'default'



# ASGI_APPLICATION = 'web_socket.asgi.application'
# CHANNEL_LAYERS = {
#     'default': {
#         'BACKEND': 'channels_redis.core.RedisChannelLayer',
#         'CONFIG': {
#             "hosts": [("127.0.0.1", 6379)],
#         },
#     },
# }


DATA_UPLOAD_MAX_MEMORY_SIZE = 10485760  # 10 MB

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.gzip.GZipMiddleware',
]

ROOT_URLCONF = 'django_project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases


# todo add diffrent user (use code from TPRO To load data from a config which then generates new users for django :)
#   This makese i posbile to add users through config. Each task schould have seperate user and permissions :)
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': database,
        'USER': user,
        'PASSWORD': password,
        'HOST': host,
        'PORT': hostPort,
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
